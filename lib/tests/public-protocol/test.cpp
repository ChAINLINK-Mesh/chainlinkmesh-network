#include <fstream>
#include <public-protocol.hpp>
#include <string>

std::string readFile(std::string filename);
void test_legitimate_packet();

void test() {
	test_legitimate_packet();
}

// Legitimate PSK signature
void test_legitimate_packet() {
	const InitialisationPacket testPacket = {
		.timestamp = 123456789ULL,
		.timestampPSKHash = { 0xbe, 0x94, 0x30, 0x7e, 0x52, 0x5e, 0x1c, 0xde,
		                      0x8d, 0x4e, 0x04, 0x64, 0x11, 0x52, 0x2f, 0x03,
		                      0x5b, 0x9d, 0xb1, 0x1d, 0x8d, 0x5d, 0x82, 0x3f,
		                      0x34, 0xac, 0x9f, 0x49, 0x3f, 0xf5, 0x30, 0x7d },
		.referringNode = 987654321ULL,
		.timestampPSKSignature = { 0x2e, 0xc6, 0xb8, 0xb3, 0x47, 0x6f, 0xad, 0x3a,
		                           0xce, 0x1d, 0xbb, 0x55, 0xd2, 0x09, 0xa0, 0x90,
		                           0x0e, 0xa2, 0xe8, 0x77, 0xd7, 0xa2, 0x0f, 0xf8,
		                           0x99, 0xdb, 0x45, 0x7e, 0xdf, 0x58, 0xb8, 0xee,
		                           0x34, 0x9e, 0xd4, 0x75, 0xf6, 0x49, 0xe2, 0x45,
		                           0x8d, 0xb6, 0x38, 0xfe, 0x33, 0x27, 0xdc, 0x41,
		                           0x59, 0xc0, 0x9a, 0x0b, 0x77, 0xe3, 0xf8, 0x3d,
		                           0xd1, 0x1a, 0xa1, 0x7b, 0xf5, 0x3b, 0xf0, 0x4d,
		                           0x17, 0x69, 0xa1, 0xee, 0xa2, 0x67, 0x07, 0x89,
		                           0xc3, 0xbf, 0xc1, 0x4b, 0xf2, 0x82, 0xc9, 0x26,
		                           0x9a, 0xb6, 0x0f, 0x83, 0x89, 0x8c, 0x52, 0x2c,
		                           0x33, 0x40, 0x17, 0x12, 0x93, 0xef, 0x2c, 0x64,
		                           0x0d, 0x9c, 0xf1, 0x44, 0x42, 0xb8, 0x24, 0xab,
		                           0x37, 0x9c, 0x15, 0xe6, 0xf4, 0x15, 0x26, 0x84,
		                           0xdd, 0x62, 0xe1, 0xab, 0x34, 0xc8, 0x04, 0x2b,
		                           0xf1, 0xc7, 0x28, 0x35, 0x56, 0xcd, 0xd1, 0x2b,
		                           0x6c, 0xb3, 0x04, 0x7f, 0x86, 0x01, 0xa5, 0x78,
		                           0xb7, 0x34, 0xa1, 0x58, 0x9a, 0xe0, 0xb5, 0x0a,
		                           0x75, 0xaf, 0xcb, 0x14, 0x21, 0x6e, 0xe3, 0x64,
		                           0x07, 0x98, 0x2a, 0x12, 0xcd, 0xf4, 0x0a, 0x13,
		                           0x8c, 0xe6, 0x9d, 0xaf, 0x88, 0x51, 0x62, 0xa5,
		                           0x35, 0x88, 0x6b, 0xa2, 0xec, 0xf6, 0x0c, 0xa7,
		                           0xde, 0xd7, 0x08, 0x5a, 0xf2, 0xe4, 0x70, 0x7d,
		                           0xd1, 0xc9, 0xb2, 0x92, 0x94, 0xf9, 0xd3, 0x3d,
		                           0x89, 0xba, 0xb9, 0x4e, 0xd0, 0x5c, 0xfe, 0x33,
		                           0xc8, 0xd8, 0x08, 0xf2, 0x81, 0x3c, 0xeb, 0xf7,
		                           0xeb, 0xb1, 0xfe, 0x02, 0xaa, 0x84, 0xeb, 0xfd,
		                           0x08, 0x47, 0x15, 0x98, 0x91, 0x4c, 0x30, 0x74,
		                           0x0d, 0xd0, 0xdf, 0xe5, 0xa2, 0x74, 0x26, 0x7b,
		                           0x10, 0xdc, 0x12, 0x12, 0x91, 0x98, 0xcf, 0x05,
		                           0x22, 0x3c, 0x5f, 0x43, 0xe0, 0x36, 0x24, 0x42,
		                           0xb7, 0x26, 0x54, 0x6e, 0x69, 0xbf, 0x4c, 0x00 },
		.csr = readFile("legitimate-csr.csr"),
	};

	const auto filePacket = readFile("legitimate-packet.data");

	if (auto packet = ConnectionHandler::decode_packet({ filePacket.data(), filePacket.size() }); !packet || packet.value() != testPacket) {
		throw "Failed to decode valid packet";
	}
}

std::string readFile(std::string filename) {
	std::ifstream file{ filename };
	file.seekg(0, std::ios_base::end);
	const long fileSize = file.tellg();
	file.seekg(0, std::ios_base::beg);

	std::string fileData(fileSize + 1, '\0');
	file.read(fileData.data(), fileSize);
	return fileData;
}
