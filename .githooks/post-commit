#!/usr/bin/env sh

function check_dependency_includes {
	(
		grep -rl '#include \"Poco' "${1}"
		grep -rl '#include \"openssl' "${1}"
		grep -rl '#include \"wireguard.h\"' "${1}"
	) | sort | uniq
}

function check_include_spacing {
	(
		grep -zrlP '#pragma once\n#include' "${1}"
		grep -zrlP '#include \".+\"\n#include <' "${1}"
  ) | sort | uniq
}

function check_c_includes {
	CHDRS=(wireguard openssl)
	find "${1}" -type f \( -name '*.cpp' -o -name '*.hpp' \) | while read -r FILE; do
		CONTEXT="$(sed -ne 'H;/extern "C" {/,/}/d;/#include/{x;p;s/.*//;h}' "${FILE}")"
		HAS_INVALID_INCLUDE=false

		for CHDR in "${CHDRS[@]}"; do
			printf "%s" "${CONTEXT}" | grep -q "#include .${CHDR}.*\.h.\$"

			if [ $? -eq 0 ]; then
				HAS_INVALID_INCLUDE=true
			fi
		done

		if [ "${HAS_INVALID_INCLUDE}" = true ]; then
			printf "%s\n" "${FILE}"
		fi
	done
}

function check_file_permissions {
	find "${1}" -type f -perm /1
}

function check_formatting {
	EXTENSIONS=(c cpp h hpp)

	for EXT in "${EXTENSIONS[@]}"; do
		find "${1}" -name "*.${EXT}" -type f | while read -r SRC_FILE; do
			clang-format --dry-run --Werror "${SRC_FILE}" 2>/dev/null
			[[ $? -ne 0 ]] && printf '%s\n' "${SRC_FILE}"
		done
	done
}

CHECKS=(check_include_spacing check_dependency_includes check_c_includes check_file_permissions check_formatting)
ROOT_DIR="$(git rev-parse --show-toplevel)"
DIRS=(lib server)
EXIT_CODE=0
CHECK_I=0

while [[ ${CHECK_I} -lt ${#CHECKS[@]} ]]; do
	CHECK="${CHECKS[CHECK_I]}"
	typeset -a ALL_DIR_VIOLATIONS

	for DIR in ${DIRS[@]}; do
		IFS="$(printf '\n')"
		VIOLATIONS="$(${CHECK} "${ROOT_DIR}/${DIR}")"
		ALL_DIR_VIOLATIONS=( ${ALL_DIR_VIOLATIONS[@]} ${VIOLATIONS[@]} )
		unset IFS
	done

	if [[ ! -z "${ALL_DIR_VIOLATIONS}" ]]; then
		printf 'Failed %s:\n' "${CHECK}"

		for VIOLATION in ${ALL_DIR_VIOLATIONS[@]}; do
			printf '\t%s\n' "${VIOLATION}"
		done
	fi

	let CHECK_I=CHECK_I+1
	ALL_DIR_VIOLATIONS=()
done

exit ${EXIT_CODE}
